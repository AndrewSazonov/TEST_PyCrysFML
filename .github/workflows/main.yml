name: main

on:
  push:
  #schedule:
  #  - cron: '*/120 8-18 * * *'  # every 2 hours from 8:00 to 18:00 every day

jobs:
  make-wheel:
    timeout-minutes: 30

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
        toolchain:
          - {compiler: gcc, version: 13}  # gfortran
          - {compiler: intel-classic, version: '2021.10'}  # ifort
          - {compiler: intel, version: '2023.2'}  # ifx
        exclude:
          - os: macos-12
            toolchain: {compiler: intel, version: '2023.2'}  # ifx not supported

    steps:
      - name: Check-out repository
        uses: actions/checkout@v3

      - name: Set up fortran (all except Windows + gfortran)
        if: runner.os != 'Windows' || matrix.toolchain.compiler != 'gcc'  # let's use pre-installed gfortran
        uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          version: ${{ matrix.toolchain.version }}

      - name: Set up fortran (Windows + gfortran)
        if: runner.os == 'Windows' && matrix.toolchain.compiler == 'gcc'  # let's use pre-installed gfortran
        shell: bash
        run: echo "FC=gfortran" >> $GITHUB_ENV

      - name: Set up nmake (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set up python3 environment
        uses: actions/setup-python@v4
        with:
            python-version: 3.11

      - name: Upgrade pip
        shell: bash
        run: python3 -m pip install --upgrade pip

      - name: Declare env variables
        if: runner.os == 'macOS'
        shell: bash
        run: echo "MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion)" >> $GITHUB_ENV  # needed because of `brew reinstall gcc`

      - name: Create scripts
        shell: bash
        run: >
          python3 scripts.py
          --platform ${{ runner.os }}
          --compiler ${{ env.FC }}
          --mode debug
          --bash-syntax

      - name: Show info
        shell: bash
        run: scripts/show_info.sh  # bash -x scripts/show_info.sh for printing commands

      - name: Download cfml repo
        shell: bash
        run: |
          scripts/create_cfml_repo_dir.sh
          scripts/download_cfml_repo.sh

      - name: Build cfml
        shell: bash
        run: |
          scripts/create_cfml_build_dir.sh
          scripts/rename_global_deps_file.sh
          scripts/compile_cfml_objs.sh
          scripts/delete_renamed_global_deps_file.sh
          scripts/create_cfml_static_lib.sh
          scripts/create_cfml_dist_dir.sh
          scripts/copy_compiled_to_cfml_dist.sh

      - name: Download pycfml repo
        shell: bash
        run: |
          scripts/create_pycfml_repo_dir.sh
          scripts/download_pycfml_repo.sh

      - name: Copy powder_mod to from cfml to pycfml
        shell: bash
        run: scripts/add_powder_mod_to_pycfml_repo.sh

      - name: Build some pycfml modules one by one
        shell: bash
        run: |
          scripts/create_pycfml_build_dir.sh
          scripts/compile_pycfml_objs.sh
          scripts/create_pycfml_shared_objs_or_dynamic_libs.sh
          scripts/create_pycfml_dist_dir.sh
          scripts/copy_compiled_to_pycfml_dist.sh

      - name: Add extra system libs to pycfml dist
        shell: bash
        run: scripts/add_extra_libs_to_pycfml_dist.sh

      - name: Add __init__.py from pycfml repo to pycfml dist
        shell: bash
        run: scripts/add_init_file_to_pycfml_dist.sh

      - name: Add magnetic_data.txt database from cfml to pycfml dist
        shell: bash
        run: scripts/add_cfml_databases_to_pycfml_dist.sh

      - name: Validate pyproject.toml
        run: |
          python3 -m pip install 'validate-pyproject[all]'
          scripts/validate_pyproject_toml.sh

      - name: Create pycfml python3 wheel
        shell: bash
        run: |
          python3 -m pip install build
          scripts/create_pycfml_python_wheel.sh

      - name: Rename pycfml wheel
        run: |
          python3 -m pip install wheel
          scripts/rename_pycfml_python_wheel.sh

      - name: Upload zipped wheel for next job
        uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: pycrysfml08-wheel_${{ matrix.os }}_${{ matrix.toolchain.compiler }}.zip
          path: tests/unit_tests/test_py_cfml_sxtal*.py
          if-no-files-found: 'error'
          compression-level: 0

  run-tests:
    timeout-minutes: 30

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
        toolchain:
          - {compiler: gcc, version: 13}  # gfortran
          - {compiler: intel-classic, version: '2021.10'}  # ifort
          - {compiler: intel, version: '2023.2'}  # ifx
        exclude:
          - os: macos-12
            toolchain: {compiler: intel, version: '2023.2'}  # ifx not supported

    steps:
      - name: Check-out repository
        uses: actions/checkout@v3

      - name: Download zipped wheel from previous job
        uses: actions/download-artifact@v4
        with:
          path: pycrysfml08_wheel
          pattern: pycrysfml08*${{ matrix.os }}*{{ matrix.toolchain.compiler }}*

      - name: Install pycfml from local wheel (with dev extras)
        shell: bash
        run: scripts/install_pycfml_from_wheel.sh

      - name: Run pycfml unit tests
        shell: bash
        run: scripts/run_pycfml_unit_tests.sh

      - name: Run powder_mod tests
        shell: bash
        run: scripts/run_powder_mod_tests.sh

      - name: Run powder_mod main
        shell: bash
        run: scripts/run_powder_mod_main.sh

      #- name: Upload calculated pattern
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: ycalc_${{ runner.os }}_${{ env.FC }}_${{ matrix.build_system }}.dat
      #    path: ycalc.dat
