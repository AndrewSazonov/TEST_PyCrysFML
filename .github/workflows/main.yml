name: main

on:
  push:
  #schedule:
  #  - cron: '*/120 8-18 * * *'  # every 2 hours from 8:00 to 18:00 every day

jobs:
  make-wheel:  # the first job

    # current job matrix. if modified, remember to UPDATE the strategy in the next job
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04] # [ubuntu-22.04, macos-12, windows-2022]
        toolchain:
          - {compiler: gcc, version: 13}  # gfortran
        #  - {compiler: intel-classic, version: '2021.10'}  # ifort
        #  - {compiler: intel, version: '2023.2'}  # ifx
        #exclude:
        #  - os: macos-12
        #    toolchain: {compiler: intel, version: '2023.2'}  # ifx not supported

    runs-on: ${{ matrix.os }}

    timeout-minutes: 30

    outputs:  # variables accessible on other jobs, dependent on the current job
      FC: ${{ steps.set-output-variables.output.FC }}
      WHEEL_NAME: ${{ steps.set-output-variables.output.WHEEL_NAME }}
      WHEEL_DIR: ${{ steps.set-output-variables.output.WHEEL_DIR }}

    steps:  # job steps
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Set up Fortran compiler (FC) [all except Windows + gfortran]
        if: runner.os != 'Windows' || matrix.toolchain.compiler != 'gcc'  # let's use pre-installed gfortran
        uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          version: ${{ matrix.toolchain.version }}

      - name: Set up Fortran compiler (FC) [Windows + gfortran]  # use pre-installed gfortran
        if: runner.os == 'Windows' && matrix.toolchain.compiler == 'gcc'
        shell: bash
        run: echo "FC=gfortran" >> $GITHUB_ENV

      - name: Set up Nmake build tool [Windows]
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set up python environment
        uses: actions/setup-python@v5
        with:
            python-version: 3.11

      - name: Upgrade package installer for Python
        shell: bash
        run: python3 -m pip install --upgrade pip

      - name: Fix reinstalling gcc [macOS] # needed because of `brew reinstall gcc`
        if: runner.os == 'macOS'
        shell: bash
        run: echo "MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion)" >> $GITHUB_ENV

      - name: Create job step scripts
        shell: bash
        run: >
          python3 scripts.py
          --platform ${{ runner.os }}
          --compiler ${{ env.FC }}
          --mode debug
          --bash-syntax

      - name: Show some debug info
        shell: bash
        run: scripts/show_info.sh  # bash -x scripts/show_info.sh for printing commands

      - name: Download cfml repository
        shell: bash
        run: |
          scripts/create_cfml_repo_dir.sh
          scripts/download_cfml_repo.sh

      - name: Build cfml static library
        shell: bash
        run: |
          scripts/create_cfml_build_dir.sh
          scripts/rename_global_deps_file.sh
          scripts/compile_cfml_objs.sh
          scripts/delete_renamed_global_deps_file.sh
          scripts/create_cfml_static_lib.sh
          scripts/create_cfml_dist_dir.sh
          scripts/copy_compiled_to_cfml_dist.sh

      - name: Download pycfml repository
        shell: bash
        run: |
          scripts/create_pycfml_repo_dir.sh
          scripts/download_pycfml_repo.sh

      - name: Copy powder_mod to from cfml to pycfml
        shell: bash
        run: scripts/add_powder_mod_to_pycfml_repo.sh

      - name: Build some pycfml modules one by one
        shell: bash
        run: |
          scripts/create_pycfml_build_dir.sh
          scripts/compile_pycfml_objs.sh
          scripts/create_pycfml_shared_objs_or_dynamic_libs.sh
          scripts/create_pycfml_dist_dir.sh
          scripts/copy_compiled_to_pycfml_dist.sh

      - name: Add extra system libs to pycfml dist
        shell: bash
        run: scripts/add_extra_libs_to_pycfml_dist.sh

      - name: Add __init__.py from pycfml repo to pycfml dist
        shell: bash
        run: scripts/add_init_file_to_pycfml_dist.sh

      - name: Add magnetic_data.txt database from cfml to pycfml dist
        shell: bash
        run: scripts/add_cfml_databases_to_pycfml_dist.sh

      - name: Validate pyproject.toml
        shell: bash
        run: |
          python3 -m pip install 'validate-pyproject[all]'
          scripts/validate_pyproject_toml.sh

      - name: Create pycfml python wheel
        shell: bash
        run: |
          python3 -m pip install build
          scripts/create_pycfml_python_wheel.sh

      - name: Rename pycfml python wheel
        shell: bash
        run: |
          python3 -m pip install wheel
          scripts/rename_pycfml_python_wheel.sh

      - name: Prepare for uploading pycfml wheel
        shell: bash
        run: |
          echo "WHEEL_DIR=$(python3 scripts.py --print-wheel-dir)" >> $GITHUB_ENV
          echo "WHEEL_NAME=`basename $(python3 scripts.py --print-wheel-dir)/*.whl .whl`" >> $GITHUB_ENV

      - name: Upload zipped pycfml wheel for next job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WHEEL_NAME }}  #  name (without .zip) of the zip file to be uploaded
          path: ${{ env.WHEEL_DIR }}  # all files from this directory are zipped
          if-no-files-found: 'error'
          compression-level: 0

      - name: Set variables to be accessible in the next jobs
        id: set-output-variables
        run: |
          echo "FC={{ env.FC }}"
          echo "WHEEL_NAME=${{ env.WHEEL_NAME }}" >> $GITHUB_OUTPUT
          echo "WHEEL_DIR=${{ env.WHEEL_DIR }}" >> $GITHUB_OUTPUT

  run-tests:  # the second job

    strategy:  # current job matrix. copy of the strategy from the previous job
      fail-fast: false
      matrix:
        os: [ubuntu-22.04] # [ubuntu-22.04, macos-12, windows-2022]
        toolchain:
          - {compiler: gcc, version: 13}  # gfortran
        #  - {compiler: intel-classic, version: '2021.10'}  # ifort
        #  - {compiler: intel, version: '2023.2'}  # ifx
        #exclude:
        #  - os: macos-12
        #    toolchain: {compiler: intel, version: '2023.2'}  # ifx not supported

    runs-on: ${{ matrix.os }}

    timeout-minutes: 30

    needs: make-wheel  # previous job need to be finished first

    env:  # variables defined in the first job
      FC: ${{ needs.make-wheel.outputs.FC }}
      WHEEL_NAME: ${{ needs.make-wheel.outputs.WHEEL_NAME }}
      WHEEL_DIR: ${{ needs.make-wheel.outputs.WHEEL_DIR }}

    steps:  # job steps
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Set up python environment
        uses: actions/setup-python@v5
        with:
            python-version: 3.11

      - name: Upgrade package installer for Python
        shell: bash
        run: python3 -m pip install --upgrade pip

      - name: Create job step scripts
        shell: bash
        run: >
          python3 scripts.py
          --platform ${{ runner.os }}
          --compiler ${{ env.FC }}
          --mode debug
          --bash-syntax

      - name: Download zipped pcfml wheel from previous job
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WHEEL_NAME }}  # name (without .zip) of the zipped artifact uploaded on the previous jobs
          path: ${{ env.WHEEL_DIR }}  # directory to extract downloaded zipped artifacts

      - name: Install pycfml from local wheel (with dev extras)
        shell: bash
        run: scripts/install_pycfml_from_wheel.sh

      - name: Run pycfml unit tests
        shell: bash
        run: scripts/run_pycfml_unit_tests.sh

      - name: Run powder_mod tests
        shell: bash
        run: scripts/run_powder_mod_tests.sh

      - name: Run powder_mod main
        shell: bash
        run: scripts/run_powder_mod_main.sh
